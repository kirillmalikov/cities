{"ast":null,"code":"const authApiUrl = 'http://localhost:8080/v1/user';\nconst errorMessage = `Network response was not OK: `;\nexport async function signUp(email, password, isAdmin) {\n  try {\n    const response = await fetch(authApiUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password,\n        isAdmin: isAdmin\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`${errorMessage}${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error creating user:', error);\n    throw error;\n  }\n}\nexport async function logIn(email, password) {\n  try {\n    const response = await fetch(`${authApiUrl}/authenticate`, {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`${errorMessage}${response.status}`);\n    }\n  } catch (error) {\n    console.error('Error logging in:', error);\n    throw error;\n  }\n}\nexport async function logOut() {\n  try {\n    const response = await fetch(`${authApiUrl}/logout`, {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`${errorMessage}${response.status}`);\n    }\n  } catch (error) {\n    console.error('Error logging out:', error);\n    throw error;\n  }\n}\nexport async function getUser() {\n  try {\n    const response = await fetch(authApiUrl, {\n      method: 'GET',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`${errorMessage}${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching user:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["authApiUrl","errorMessage","signUp","email","password","isAdmin","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","json","error","console","logIn","credentials","logOut","getUser"],"sources":["/app/src/api/auth-api.ts"],"sourcesContent":["import {UserResponse} from \"./api-types\";\r\n\r\nconst authApiUrl = 'http://localhost:8080/v1/user';\r\nconst errorMessage = `Network response was not OK: `\r\n\r\nexport async function signUp(email: string, password: string, isAdmin?: boolean): Promise<UserResponse> {\r\n    try {\r\n        const response = await fetch(authApiUrl, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({email: email, password: password, isAdmin: isAdmin}),\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error(`${errorMessage}${response.status}`);\r\n        }\r\n\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Error creating user:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport async function logIn(email: string, password: string) {\r\n    try {\r\n        const response = await fetch(`${authApiUrl}/authenticate`, {\r\n            method: 'POST',\r\n            credentials: 'include',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({email: email, password: password}),\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error(`${errorMessage}${response.status}`);\r\n        }\r\n    } catch (error) {\r\n        console.error('Error logging in:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport async function logOut() {\r\n    try {\r\n        const response = await fetch(`${authApiUrl}/logout`, {\r\n            method: 'POST',\r\n            credentials: 'include',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error(`${errorMessage}${response.status}`);\r\n        }\r\n    } catch (error) {\r\n        console.error('Error logging out:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport async function getUser(): Promise<UserResponse> {\r\n    try {\r\n        const response = await fetch(authApiUrl, {\r\n            method: 'GET',\r\n            credentials: 'include',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error(`${errorMessage}${response.status}`);\r\n        }\r\n\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Error fetching user:', error);\r\n        throw error;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}